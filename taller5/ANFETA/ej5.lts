PRIMES_SPEC= Q0,
Q0 = (filter[0].prime[2] -> Q1),
Q1 = (filter[1].prime[3] -> Q2),
Q2 = (filter[2].prime[5] -> Q3),
Q3 = (filter[3].prime[7] -> Q4),
Q4 = (end -> Q0) + {filter[0..3].prime[2..15]}.


const MAX=15
const N=4
range NUM=2..MAX
set S={[NUM],eos}
// Pipe process buffers elements from set S:
PIPE=(put[x:S]->get[x]->PIPE).
// GEN process outputs numbers from 2 to MAX followed by the signal eos:
GEN=GEN[2],
GEN[x:NUM]=(out.put[x]->
if x<MAX then
GEN[x+1]
else
(out.put.eos->end->GEN)
).
/*initialize from the first input from prev stage */
FILTER=(in.get[p:NUM] -> prime[p] -> FILTER[p]
|in.get.eos -> ENDFILTER),
/*filter all inputs that are multiples of p*/
FILTER[p:NUM]=(in.get[x:NUM]->
if x%p!=0 then
(out.put[x]->FILTER[p])
else
FILTER[p]
|in.get.eos->ENDFILTER
),
/*terminate filter on eos*/
ENDFILTER=(out.put.eos -> end -> FILTER).
||PRIMES=
(gen:GEN
|| pipe[0..N-1]:PIPE
|| filter[0..N-1]:FILTER)
/{pipe[0]/gen.out,
pipe[i:0..N-1]/filter[i].in,
pipe[i:1..N-1]/filter[i-1].out,
end/{filter[0..N-1].end,gen.end}}.

||HIDDEN_PRIMES = PRIMES \ {pipe[i:0..N-1].put[j:2..MAX], pipe[i:0..N-1].get[j:2..MAX], filter[3].in.put[j:2..MAX], filter[3].out.put[j:2..MAX], filter[3].out.put.eos, pipe[i:0..N-1].put.eos, pipe[i:0..N-1].get.eos}.

||SYS = (PRIMES_SPEC || HIDDEN_PRIMES).
